# -*- coding: utf-8 -*-
"""3.1 qs.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1baH_FTU__x_c2oS3670tKX7wuvi0ZZop
"""

import numpy as np

X = np.array([[1,2,3],[4,5,6],[7,10,9],[6,2,3]])
X

y = np.array([[12,32,43]])

y = np.transpose(y)
y

w=np.linalg.det(X)
w

a=np.ones((1,3))
a

X_1=np.vstack((X,a))
X_1

X_tran = np.transpose(X_1)

C = np.dot(X_1,X_tran)
C

I = np.identity(4)
z = np.zeros((4,1))
I = np.hstack((I,z))
z = np.transpose(np.zeros((5,1)))
I_bar = np.vstack((I,z))
I_bar

lam=0.1
I_bar=I_bar*lam
I_bar

X_left = np.add(C,I_bar)
X_left

X_right=np.dot(X_1,y)
X_right

theta = np.linalg.lstsq(X_left,X_right)

import pandas as pd
#theta = pd.DataFrame(list(theta))
#theta_1 = pd.DataFrame(theta[0][0])
#theta_2 = theta_1.as_matrix()
#bias = theta_2[4][0]

#bias
theta

theta_2.shape

#theta_3 = np.array([[theta_2[0][0],theta_2[1][0],theta_2[2][0],theta_2[3][0]]])

theta_3=np.delete(theta_2,-1)
t_theta = np.dot(theta_3,X)+bias
#t_theta

X_bar = np.hstack((X,X0))
X_bar

X_bar_t=np.transpose(X_bar)
X_bar_t

X1 = np.matmul(X_bar,X_bar_t)
X1

I = np.identity(2)
X1 = np.zeros(2)
X2 = np.zeros(3)
I_bar = np.vstack((I,X1))
n,m = I_bar.shape
I_bar = np.hstack((I_bar,np.zeros((n,1))))
I_bar

X_left = np.add(X1,I_bar)
X_left.shape

X_right = np.matmul(X_bar,y)
X_right

X_final, residual, rank,s = np.linalg.lstsq(X_left,X_right)
#X_final  = np.transpose(X_final)
X_final

bias_right = np.matmul(X_final,X_bar)
bias_right

bias = y-bias_right
bias

def RidgeReg(X,y,lamb):
  X0 = np.ones((3,1))
  X_bar = np.hstack((X,X0))
  X_bar_t=np.transpose(X_bar)
  X1 = np.matmul(X_bar,X_bar_t)
  X1.shape
  I = np.identity(2)
  Xp = np.zeros(2)
  X2 = np.zeros(3)
  I_bar = np.vstack((I,Xp))
  n,m = I_bar.shape
  I_bar = np.hstack((I_bar,np.zeros((n,1))))
  X_left = np.add(X1,I_bar)
  X_right = np.matmul(X_bar,y)
  X_final, residual, rank,s = np.linalg.lstsq(X_left,X_right)
  bias_right = np.matmul(X_final,X_bar)
  bias = y-bias_right
  w = np.matmul(X_final,np.transpose(X_final))
  w= w*w*lamb
  sum=0
  for x in range(1,3):
    p=np.matmul(np.transpose(X_final),X[1])
    p=p+bias[0]
    p=p-y[0]
    p=p*p
    sum+=p
  C_inv = np.linalg.inv(np.transpose(X1))
  for i in range(0,3):
    top = np.transpose(w)*X[:,i]-y[i]
    bottom = np.matmul(np.matmul(np.transpose(X[:,i]),C_inv),X[:,i])
    res = top/bottom
    print(res)
    
  return X_final,bias,sum,res
  
X_final, b,sum,res = RidgeReg(X,y,0.1)
X_final

b

w = np.matmul(X_final,np.transpose(X_final))
w= w*w*0.1
sum=0
for x in range(1,3):
  p=np.matmul(np.transpose(X_final),X[1])
  p=p+b[0]
  p=p-y[0]
  p=p*p
  sum+=p
sum

C_inv = np.linalg.inv(np.transpose(X1))
C_inv

for i in range(0,3):
  top = np.transpose(w)*X[:,i]-y[i]
  bottom = np.matmul(np.matmul(np.transpose(X[:,i]),C_inv),X[:,i])
  res = top/bottom
  print(res)
#res

res